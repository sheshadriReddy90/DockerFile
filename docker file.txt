
DOCKERFILE
-------------------
*Its a  file using which we can crete a docker image. In dcker file we are going write instructions to crete an image quickly.

*In docker file we are going to use docker DSL(Domin specific language). 

*keywords/directivtives

Somekey words are
-------------------------
1.From

2.Maintainer

3.COPY

4.ADD

5.RUN

6.CMD

7.ENTRYPOINT

8.LABEL

9.ARG

10.ENV

11.WORKDIR

12.USER

13.EXPOSE

14.USER

15.VOLUME

DOCKER IMAGE:
-----------------------
It's  an excutable package which contains everything (app code and it's dependecies) such as softwares, configurations, env, vars etc.) which is required to run a piece of code.

SAMPLE EXAMPLE
-------------------------

1.FROM <ImageTag> 
--------------------------
It's an base image using which we are creating our image.

Example:: FROM Nginx

2.MAINTAINER
--------------------
Who is owner of this  docker file.

EX:: MAINTAINER <sheshadri@gamil.com>
-----

3.COPY
-----------
Using copy we can copy local files  files/folders from system  where we re builng the image,(Local system) to the image. 

*what type of files we can copy regular files

ex:: COPY <Source> <Destination>

Source --> The file is in our  system [ under dir/sub-dir]

it is should in be part of our build context only.

Destination ---> in which dir u want to copy

example:: sheshu/file/
     or

COPY . . 

1st represents ---> current dir

2nd dot represnts -->  current dir of our image



4.ADD
----------
ADD also we can copy files to the image.

*if we are  copying tar files using add.it will add the file and extract the file also. file should be end with .tar file.


* There is two ways of defining the add
------------------------------------------------
ADD <Sourcepath> <Des> 
ex:: ADD sheshadri/var/lib/

ADD <SourceUrl> <Des>
ex:: https://mirrros.estointernent.in//    /opt/tomact.tar.gz



DIFF B/W COPY AND ADD
-----------------------------------
* add can copy local files and also files from remote https locations.

*copy it will copy only the local files.

EXAMPLE
--------------
FROM tomact:8.0.20-jre8

COPY target/java-web-app*.war /usr/local/tomcat/webapps/java-web-app.tar


5.RUN ::  using run we can run any command on top of the previou layaer or image.

*These RUN commands will be excuted while creating an image.

ex: for an example we can install required packages while cretaing an image.

*we can have n number of RUN instructions.will process all the instructions from top to bottom.

ex:: RUN Yum install docker -y


6.CMD
--------------
Uinsg cmd also we can run command.

ex:: CMD ["java","-jar","spring-boot-mongo.jar"]

CMD ["sh" ,"abc.sh"]
CMD ["date"]

What is diff b/w RUN & CMD
------------------------------------
CMD instrction or command will excute the commnd while creting  the container.

*This is used to run a application( process).

*can we have more than one CMD in DF
-------------------------------------------------
we can have more than one CMD ins .but docker will use only one CMD( it will excute recent one/last cmd in the order)


7.ENTRYPOINT
---------------------
we can set ENTRYPOINT for the container.we can run commands using ENTRYPOINT.ENTRYPOINT commands will be excuted while sarting the container.


DIFF b/w entrypoint and cmd
-------------------------------------
CMD:: commnds/ins can be overriden at run time( while creting a container).

Entrpint: we can't overwrite the commnds.

EXAMPLE
------------------
FROM centos

Run echo "RunOne"

RUN mkdir .opt/app

RUN yum install git -y

RUN echo " RunTwo".

ENTRYPOINT ["echo","welcome"]

Build Cache
-----------------
if their is alredy layred creted it is going that layer.

How to see layers of the image
--------------------------------------------
docker inspect <imageNmae/Id>
docker history    '''''''

docker build -t <imagename> .

docker build --no-cache -t <imagename> .

we can override cmd while building the image
----------------------------------------------------------
docker  run <imageone> <command>


8.LABEL:: lables are key-value pairs
------------
* we can add or (attach) a lable to the image.

9.ARG:: Argument we can pass arguemts to the docker build.we can define arg in docker file this args can be refferd in docker file.

example
-------------
FROM tomcat:8--jdk-8-temurin
ARG baranchNmae=develop
Label baranchNmae ${brachNmae}
Label team mithun
Label temdl
copy target/maven-weba-app *.war /usr/locl/

Too pass arguments
------------------------
docker build --build-arg -t image_name .




9.ENV:: Key-value pair. we can set an environmnt varibales for image/con

ENV JAV_HOME /usr/bin/java

ENV TOMCAT_HOME /usr/local/tomcat

ENV PATH ${Path}


*don't use yum ,sysstemctl in dockerfile

EXPOSE:  we can define on which port container will listen. its kind of documention for people who is going to use the image.

EXPOSE 8080

====================================

USER: we can set user for an image/con .so the container process will be running as that user insted of root user.

Ex:: USER jenkins

RUN useradd jenkins

=====================================

VOLUME:: container file system exist as long as container exist.

*vol will mount container dir wth host machine filesystem.

VOLUME /data/db

/var/lib/docker/volumes/fafda






























